def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = []

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = []

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = []

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = []

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = []

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = []

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = []

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = []

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = []

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = []

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, line, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_nr} = Darwin.ActiveMutation.get()
  corrected_index = active_mutation_nr - mutation_index

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_ast, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index()),
         AbstractCode.encode_integer(nr_of_mutations, line),
         mutated_left,
         mutated_right
       ]},
      line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Mutator.Helpers.DefMutator)
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  {mutated_left, ctx} = DefMutator.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = DefMutator.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      DefMutator.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :+, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpAddMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'+' operator: delete left argument",
      name: "delete left argument",
      example_input: "a + b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'+' operator: delete right argument",
      name: "delete right argument",
      example_input: "a + b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a + b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a + b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a + b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpAddMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :-, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpSubMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'-' operator: swap arguments",
      name: "swap arguments",
      example_input: "a - b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'-' operator: delete left argument",
      name: "delete left argument",
      example_input: "a - b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'-' operator: delete right argument",
      name: "delete right argument",
      example_input: "a - b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a - b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a - b",
      example_output: "b * a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a - b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpSubMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :*, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpMulMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'*' operator: delete left argument",
      name: "delete left argument",
      example_input: "a * b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'*' operator: delete right argument",
      name: "delete right argument",
      example_input: "a * b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a * b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a * b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_div, []},
      description: "replace by '/'",
      example_input: "a * b",
      example_output: "b / a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpMulMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :/, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpDivMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'/' operator: swap arguments",
      name: "swap arguments",
      example_input: "a / b",
      example_output: "b / a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_left, []},
      description: "'/' operator: delete left argument",
      name: "delete left argument",
      example_input: "a / b",
      example_output: "a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_delete_right, []},
      description: "'/' operator: delete right argument",
      name: "delete right argument",
      example_input: "a / b",
      example_output: "b"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_add, []},
      description: "replace by '+'",
      example_input: "a / b",
      example_output: "b + a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_sub, []},
      description: "replace by '-'",
      example_input: "a / b",
      example_output: "b - a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_mul, []},
      description: "replace by '*'",
      example_input: "a / b",
      example_output: "b * a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(abstract_code, Darwin.Mutators.Default.OpDivMutator, mutation)
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_left, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_delete_right, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_add, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_sub, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_mul, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_div, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<' operator: swap arguments",
      name: "swap arguments",
      example_input: "a < b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a < b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a < b",
      example_output: "false"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a < b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a < b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a < b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a < b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a < b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :<=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpLessThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'<=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a <= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a <= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a <= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a <= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a <= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a <= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a <= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a <= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpLessThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :==, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a == b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a == b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a == b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a == b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a == b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a == b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a == b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :!=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpNotEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a != b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a != b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a != b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a != b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a != b",
      example_output: "b == a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a != b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a != b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpNotEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>' operator: swap arguments",
      name: "swap arguments",
      example_input: "a > b",
      example_output: "b > a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a > b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a > b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a > b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a > b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a > b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a > b",
      example_output: "b != a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than_or_equal_to, []},
      description: "replace by '>='",
      example_input: "a > b",
      example_output: "b >= a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
             [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} = {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, []}
      apply(m, f, args ++ [left, right])
  end
end

def(
  mutate({:op, line, :>=, left, right} = abstract_code, %Darwin.Mutator.Context{} = ctx, mutators)
) do
  alias(Darwin.Erlang.AbstractCode)
  alias(Darwin.Mutator.Context)
  alias(Darwin.Mutators)
  {mutated_left, ctx} = Mutators.apply_mutators(mutators, left, ctx)
  {mutated_right, ctx} = Mutators.apply_mutators(mutators, right, ctx)
  codon = Context.new_codon(ctx, value: abstract_code)
  nr_of_mutations = Context.nr_of_mutations(ctx)
  module = ctx.module()

  mutated_abstract_code =
    AbstractCode.call_mfa(
      {Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator, :__do_mutate__,
       [
         AbstractCode.encode_atom(module),
         AbstractCode.encode_integer(codon.index(), line: line),
         AbstractCode.encode_integer(nr_of_mutations, line: line),
         mutated_left,
         mutated_right
       ]},
      line: line
    )

  mutation_data = [
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
         [{Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_swap_args, []},
      description: "'>=' operator: swap arguments",
      name: "swap arguments",
      example_input: "a >= b",
      example_output: "b >= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_true, []},
      description: "replace by 'true'",
      example_input: "a >= b",
      example_output: "true"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_always_false, []},
      description: "replace by 'false'",
      example_input: "a >= b",
      example_output: "false"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]},
      abstract_code_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_less_than, []},
      description: "replace by '<'",
      example_input: "a >= b",
      example_output: "b < a"
    ],
    [
      runtime_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_less_than_or_equal_to, []},
      description: "replace by '<='",
      example_input: "a >= b",
      example_output: "b <= a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_equal_to, []},
      description: "replace by '=='",
      example_input: "a >= b",
      example_output: "b == a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_not_equal_to, []},
      description: "replace by '!='",
      example_input: "a >= b",
      example_output: "b != a"
    ],
    [
      runtime_mfa: {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]},
      abstract_code_mfa:
        {Darwin.Mutators.Default.BinOpMutatorCreator, :abstract_code_greater_than, []},
      description: "replace by '>'",
      example_input: "a >= b",
      example_output: "b > a"
    ]
  ]

  mutations =
    Enum.map(mutation_data, fn mutation ->
      Mutators.make_mutation_opts(
        abstract_code,
        Darwin.Mutators.Default.OpGreaterThanOrEqualToMutator,
        mutation
      )
    end)

  ctx = Context.add_mutations(ctx, codon, mutations)
  {:ok, {mutated_abstract_code, ctx}}
end

def(mutate(_abstract, _ctx, _mutators)) do
  :error
end

@doc false
def(__do_mutate__(module, codon_index, mutation_index, left, right)) do
  {active_module, active_codon_index, active_mutation_index} = Darwin.ActiveMutation.get()

  case(module == active_module and codon_index == active_codon_index) do
    true ->
      corrected_index = active_mutation_index - mutation_index

      corrected_index
      |> case do
        0 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_swap_args,
             [
               {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to,
                []}
             ]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        1 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_true, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        2 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_always_false, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        3 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        4 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_less_than_or_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        5 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        6 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_not_equal_to, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        7 ->
          {alt_m, alt_f, alt_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than, [nil]}

          apply(alt_m, alt_f, alt_args ++ [left, right])

        _ ->
          {default_m, default_f, default_args} =
            {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

          apply(default_m, default_f, default_args ++ [left, right])
      end

    false ->
      {m, f, args} =
        {Darwin.Mutators.Default.BinOpMutatorCreator, :runtime_greater_than_or_equal_to, []}

      apply(m, f, args ++ [left, right])
  end
end
